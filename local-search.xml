<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言字符串处理</title>
    <link href="/2023/09/13/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <url>/2023/09/13/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言-字符串-s"><a href="#C语言-字符串-s" class="headerlink" title="C语言 字符串 %s"></a>C语言 字符串 %s</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>C语言处理字符串    通过%s输出遇到的问题</p></blockquote><h3 id="1、我的结构体定义"><a href="#1、我的结构体定义" class="headerlink" title="1、我的结构体定义"></a>1、我的结构体定义</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scss">typedef struct<br><br>&#123;<br><br>char head <span class="hljs-selector-attr">[4]</span>;<br><br>char name <span class="hljs-selector-attr">[8]</span>;<br><br>char spare <span class="hljs-selector-attr">[4]</span>;<br><br>&#125; IF_AA01; <span class="hljs-comment">//aa01</span><br><br></code></pre></td></tr></table></figure><p>定义了三个结构体成员变量，均为字符数组。<code>spare</code>为空格。</p><h4 id="2、main-函数"><a href="#2、main-函数" class="headerlink" title="2、main()函数"></a>2、main()函数</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> argc, <span class="hljs-built_in">char</span> <span class="hljs-keyword">const</span> *argv[]</span>)</span><br><br>&#123;<br><br>IF_AA01 aa01;<br><br><span class="hljs-built_in">char</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">16</span>] = <span class="hljs-string">&quot;AA01AS01101     &quot;</span>;<br><br><span class="hljs-built_in">char</span> _no[<span class="hljs-number">8</span>];<br><br>memcpy(&amp;aa01, <span class="hljs-built_in">string</span>, <span class="hljs-keyword">sizeof</span>(aa01));<br><br><span class="hljs-comment">// 将字符串中的空格替换为 &#x27;\0&#x27;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(aa01.name); i++) <br>&#123;<br><br><span class="hljs-keyword">if</span> (aa01.name[i] == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br><br>aa01.name[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>&#125;<br><br>&#125;<br><br>strncpy(_no, aa01.name, <span class="hljs-keyword">sizeof</span>(aa01.name));<br><br>printf(<span class="hljs-string">&quot;[%.*s]\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(aa01.head), aa01.head);<br><br>printf(<span class="hljs-string">&quot;[%s]&quot;</span>,_no);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>string</code> 字符串定义的 <code>AA01AS01101     </code>后面一共5个空格 ，<code>name</code>属性的最后一个空格 ，还有<code>spare</code> 的4个空格 。</p><h4 id="3、格式化控制-s"><a href="#3、格式化控制-s" class="headerlink" title="3、格式化控制 %s"></a>3、格式化控制 %s</h4><p>使用<code>%s</code>格式化控制输出字符串时，我发现如果不进行控制，他会一直输出到<code>\0</code>为止 。<br>这就导致在结构体中的字符串成员变量失去价值 。</p><h4 id="4、解决方案"><a href="#4、解决方案" class="headerlink" title="4、解决方案"></a>4、解决方案</h4><ol><li><p><code>%.4s</code> 设置宽度，即输出从此地址下的往后4个字节的字符串的宽度 。</p></li><li><p><code>%.*s</code> * 相当于一个占位符，和1一样 。<br> 语法 ：<code>printf(&quot;[%.*s]\n&quot;, sizeof(aa01.head), aa01.head);</code></p></li><li><p>第三种方法是我将<code>name</code>的第八位的空格 ，也就是 <code>name[7]</code> 空格替换为了<code>\0</code>，这样遇到结束符号就停止，不会再向下输出了。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/10/hello-world/"/>
    <url>/2023/09/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
